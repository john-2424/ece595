#!/usr/bin/env bash

# Install requirements.txt
echo "[[[[[[[[[[[[[[[[ Installing requirements.txt ]]]]]]]]]]]]]]]]"
pip install -r requirements.txt
echo ""
echo ""
echo ""
echo ""

# Get data if missing and unzip to ./data
echo "[[[[[[[[[[[[[[[[ Downloading/Unzipping Dataset.. ]]]]]]]]]]]]]]]]"
mkdir -p data
if [ ! -f "data/README_h2" ]; then
  echo "[Info] Fetching dataset zip if not present"
  if [ ! -f "h2-data.zip" ]; then
    echo "[Info] Downloading dataset"
    if command -v curl >/dev/null 2>&1; then
      curl -L -o h2-data.zip "https://engineering.purdue.edu/ece595cv/h2-data.zip"
    else
      wget -O h2-data.zip "https://engineering.purdue.edu/ece595cv/h2-data.zip"
    fi
  fi
  echo "[Info] Unzipping dataset file"
  unzip -q -o h2-data.zip -d data
  echo "ok" > data/README_h2
else
  echo "[Info] Dataset is present!"
fi
echo ""
echo ""
echo ""
echo ""

# Model Blueprint
echo "[[[[[[[[[[[[[[[[ Model Blueprint (SmallNet) ]]]]]]]]]]]]]]]]"
cat <<'ARCH'
┌──────────────────────────────────────────────────────────────────────────────┐
│ SmallNet (VGG-ish, lightweight)                                              │
│                                                                              │
│ Input: (B, 3, 128, 128)                                                      │
│                                                                              │
│ stem:                                                                        │
│   └─ Conv(3→32, k3,s1,p1) → BatchNorm → ReLU                                 │
│                                                                              │
│ block1:                                                                      │
│   ├─ Conv(32→32, k3,s1,p1) → BN → ReLU                                       │
│   ├─ Conv(32→32, k3,s1,p1) → BN → ReLU                                       │
│   ├─ + Residual (since in==out==32)                                          │
│   └─ MaxPool(2×2, s2)         → spatial /2                                   │
│                                                                              │
│ block2:                                                                      │
│   ├─ Conv(32→64, k3,s1,p1) → BN → ReLU                                       │
│   ├─ Conv(64→64, k3,s1,p1) → BN → ReLU                                       │
│   └─ MaxPool(2×2, s2)         → spatial /4                                   │
│                                                                              │
│ block3:                                                                      │
│   ├─ Conv(64→128, k3,s1,p1) → BN → ReLU                                      │
│   ├─ Conv(128→128, k3,s1,p1) → BN → ReLU                                     │
│   └─ MaxPool(2×2, s2)         → spatial /8                                   │
│                                                                              │
│ head:                                                                        │
│   ├─ AdaptiveAvgPool2d(1)  → (B,128,1,1)                                     │
│   ├─ Flatten               → (B,128)                                         │
│   ├─ Dropout(p=0.1)                                                          │
│   └─ Linear(128→4)         → logits for {cat, banana, elephant, bike}        │
│                                                                              │
│ Notes: 3×3 stacks (VGG principle), BatchNorm everywhere, tiny dropout,       │
│        one residual add in block1 only (in==out).                            │
└──────────────────────────────────────────────────────────────────────────────┘
ARCH
echo ""
echo ""
echo ""
echo ""

# Model Shapes & Params
echo "[[[[[[[[[[[[[[[[ Model Shapes & Params ]]]]]]]]]]]]]]]]"
python trace.py
echo ""
echo ""
echo ""
echo ""

# Train
echo "[[[[[[[[[[[[[[[[ Training model.. ]]]]]]]]]]]]]]]]"
python train.py
echo ""
echo ""
echo ""
echo ""

# Test
echo "[[[[[[[[[[[[[[[[ Testing/Evaluation (based on the trained model).. ]]]]]]]]]]]]]]]]"
python test.py
echo ""
echo ""
echo ""
echo ""

# Inference
echo "[[[[[[[[[[[[[[[[ Inferencing/Image Classification (based on the trained model).. ]]]]]]]]]]]]]]]]"
python inference.py
echo ""
echo ""
echo ""
echo ""

echo "Checkout 'artifacts' folder for results and outcomes!!"